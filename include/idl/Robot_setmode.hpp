/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: /home/oem/work/n2/dds/dds-test-demo/idl/Robot_setmode.idl
  Source: /home/oem/work/n2/dds/dds-test-demo/build/Robot_setmode.hpp
  Cyclone DDS: v0.11.0

*****************************************************************/
#ifndef DDSCXX__HOME_OEM_WORK_N2_DDS_DDS_TEST_DEMO_BUILD_ROBOT_SETMODE_HPP_18ABAB86D32F84B66D0DA8D7B46CF222
#define DDSCXX__HOME_OEM_WORK_N2_DDS_DDS_TEST_DEMO_BUILD_ROBOT_SETMODE_HPP_18ABAB86D32F84B66D0DA8D7B46CF222

#include <utility>
#include <ostream>
#include <cstdint>

namespace RobotSetMode
{
class SetMode
{
private:
 uint16_t mode_ = 0;

public:
  SetMode() = default;

  explicit SetMode(
    uint16_t mode) :
    mode_(mode) { }

  uint16_t mode() const { return this->mode_; }
  uint16_t& mode() { return this->mode_; }
  void mode(uint16_t _val_) { this->mode_ = _val_; }

  bool operator==(const SetMode& _other) const
  {
    (void) _other;
    return mode_ == _other.mode_;
  }

  bool operator!=(const SetMode& _other) const
  {
    return !(*this == _other);
  }

};

std::ostream& operator<<(std::ostream& os, SetMode const& rhs);

} //namespace RobotSetMode

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::RobotSetMode::SetMode>::getTypeName()
{
  return "RobotSetMode::SetMode";
}

template <> constexpr bool TopicTraits<::RobotSetMode::SetMode>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPELIB
template<> constexpr unsigned int TopicTraits<::RobotSetMode::SetMode>::type_map_blob_sz() { return 202; }
template<> constexpr unsigned int TopicTraits<::RobotSetMode::SetMode>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::RobotSetMode::SetMode>::type_map_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x3b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0x8a,  0xe8,  0x02,  0x25,  0xd2,  0x6b,  0xfc, 
 0x22,  0x1e,  0x95,  0x5e,  0xdb,  0x41,  0x36,  0x00,  0x23,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x13,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x06,  0x15,  0xd6,  0x17,  0x12,  0x00, 
 0x5f,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0xcc,  0x77,  0x37,  0x76,  0xcc,  0xcd,  0x5c, 
 0xf6,  0xf3,  0xba,  0x76,  0xcf,  0x79,  0xc6,  0x00,  0x47,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x1e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x52,  0x6f,  0x62,  0x6f, 
 0x74,  0x53,  0x65,  0x74,  0x4d,  0x6f,  0x64,  0x65,  0x3a,  0x3a,  0x53,  0x65,  0x74,  0x4d,  0x6f,  0x64, 
 0x65,  0x00,  0x00,  0x00,  0x1b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x13,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x06,  0x00,  0x05,  0x00,  0x00,  0x00,  0x6d,  0x6f,  0x64,  0x65, 
 0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0xcc,  0x77,  0x37, 
 0x76,  0xcc,  0xcd,  0x5c,  0xf6,  0xf3,  0xba,  0x76,  0xcf,  0x79,  0xc6,  0xf1,  0x8a,  0xe8,  0x02,  0x25, 
 0xd2,  0x6b,  0xfc,  0x22,  0x1e,  0x95,  0x5e,  0xdb,  0x41,  0x36, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::RobotSetMode::SetMode>::type_info_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x8a,  0xe8,  0x02,  0x25,  0xd2,  0x6b,  0xfc,  0x22,  0x1e,  0x95,  0x5e, 
 0xdb,  0x41,  0x36,  0x00,  0x27,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0xcc,  0x77,  0x37,  0x76,  0xcc,  0xcd,  0x5c,  0xf6,  0xf3,  0xba,  0x76, 
 0xcf,  0x79,  0xc6,  0x00,  0x4b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPELIB

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::RobotSetMode::SetMode>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::RobotSetMode::SetMode>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::RobotSetMode::SetMode)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
const propvec &get_type_props<::RobotSetMode::SetMode>();

namespace {
  static const volatile propvec &properties___RobotSetMode__SetMode = get_type_props<::RobotSetMode::SetMode>();
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::RobotSetMode::SetMode& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.mode()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::RobotSetMode::SetMode& instance, key_mode key) {
  const auto &props = get_type_props<::RobotSetMode::SetMode>();
  str.set_mode(cdr_stream::stream_mode::write, key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::RobotSetMode::SetMode& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.mode()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::RobotSetMode::SetMode& instance, key_mode key) {
  const auto &props = get_type_props<::RobotSetMode::SetMode>();
  str.set_mode(cdr_stream::stream_mode::read, key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::RobotSetMode::SetMode& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.mode()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::RobotSetMode::SetMode& instance, key_mode key) {
  const auto &props = get_type_props<::RobotSetMode::SetMode>();
  str.set_mode(cdr_stream::stream_mode::move, key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::RobotSetMode::SetMode& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.mode()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::RobotSetMode::SetMode& instance, key_mode key) {
  const auto &props = get_type_props<::RobotSetMode::SetMode>();
  str.set_mode(cdr_stream::stream_mode::max, key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX__HOME_OEM_WORK_N2_DDS_DDS_TEST_DEMO_BUILD_ROBOT_SETMODE_HPP_18ABAB86D32F84B66D0DA8D7B46CF222
