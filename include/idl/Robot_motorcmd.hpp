/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: /home/oem/work/n2/dds/dds-test-demo/idl/Robot_motorcmd.idl
  Source: /home/oem/work/n2/dds/dds-test-demo/build/Robot_motorcmd.hpp
  Cyclone DDS: v0.11.0

*****************************************************************/
#ifndef DDSCXX__HOME_OEM_WORK_N2_DDS_DDS_TEST_DEMO_BUILD_ROBOT_MOTORCMD_HPP_08CB57AB4087A294ADC4C40C9961D701
#define DDSCXX__HOME_OEM_WORK_N2_DDS_DDS_TEST_DEMO_BUILD_ROBOT_MOTORCMD_HPP_08CB57AB4087A294ADC4C40C9961D701

#include <utility>
#include <ostream>
#include <cstdint>
#include <array>
#include <vector>

namespace RobotMotorCmd
{
class MotorCmd
{
private:
 double pos_ = 0.0;
 double vel_ = 0.0;
 double tau_ = 0.0;
 double kp_ = 0.0;
 double kd_ = 0.0;
 uint16_t motor_id_ = 0;

public:
  MotorCmd() = default;

  explicit MotorCmd(
    double pos,
    double vel,
    double tau,
    double kp,
    double kd,
    uint16_t motor_id) :
    pos_(pos),
    vel_(vel),
    tau_(tau),
    kp_(kp),
    kd_(kd),
    motor_id_(motor_id) { }

  double pos() const { return this->pos_; }
  double& pos() { return this->pos_; }
  void pos(double _val_) { this->pos_ = _val_; }
  double vel() const { return this->vel_; }
  double& vel() { return this->vel_; }
  void vel(double _val_) { this->vel_ = _val_; }
  double tau() const { return this->tau_; }
  double& tau() { return this->tau_; }
  void tau(double _val_) { this->tau_ = _val_; }
  double kp() const { return this->kp_; }
  double& kp() { return this->kp_; }
  void kp(double _val_) { this->kp_ = _val_; }
  double kd() const { return this->kd_; }
  double& kd() { return this->kd_; }
  void kd(double _val_) { this->kd_ = _val_; }
  uint16_t motor_id() const { return this->motor_id_; }
  uint16_t& motor_id() { return this->motor_id_; }
  void motor_id(uint16_t _val_) { this->motor_id_ = _val_; }

  bool operator==(const MotorCmd& _other) const
  {
    (void) _other;
    return pos_ == _other.pos_ &&
      vel_ == _other.vel_ &&
      tau_ == _other.tau_ &&
      kp_ == _other.kp_ &&
      kd_ == _other.kd_ &&
      motor_id_ == _other.motor_id_;
  }

  bool operator!=(const MotorCmd& _other) const
  {
    return !(*this == _other);
  }

};

std::ostream& operator<<(std::ostream& os, MotorCmd const& rhs);

class ControlCmd
{
private:
 std::array<double, 2> axes_ = { };
 int32_t action_ = 0;

public:
  ControlCmd() = default;

  explicit ControlCmd(
    const std::array<double, 2>& axes,
    int32_t action) :
    axes_(axes),
    action_(action) { }

  const std::array<double, 2>& axes() const { return this->axes_; }
  std::array<double, 2>& axes() { return this->axes_; }
  void axes(const std::array<double, 2>& _val_) { this->axes_ = _val_; }
  void axes(std::array<double, 2>&& _val_) { this->axes_ = std::move(_val_); }
  int32_t action() const { return this->action_; }
  int32_t& action() { return this->action_; }
  void action(int32_t _val_) { this->action_ = _val_; }

  bool operator==(const ControlCmd& _other) const
  {
    (void) _other;
    return axes_ == _other.axes_ &&
      action_ == _other.action_;
  }

  bool operator!=(const ControlCmd& _other) const
  {
    return !(*this == _other);
  }

};

std::ostream& operator<<(std::ostream& os, ControlCmd const& rhs);

class MotorCmdArray
{
private:
 std::vector<::RobotMotorCmd::MotorCmd> motorcmds_;
 ::RobotMotorCmd::ControlCmd controlcmd_;
 int64_t timestamp_ = 0;

public:
  MotorCmdArray() = default;

  explicit MotorCmdArray(
    const std::vector<::RobotMotorCmd::MotorCmd>& motorcmds,
    const ::RobotMotorCmd::ControlCmd& controlcmd,
    int64_t timestamp) :
    motorcmds_(motorcmds),
    controlcmd_(controlcmd),
    timestamp_(timestamp) { }

  const std::vector<::RobotMotorCmd::MotorCmd>& motorcmds() const { return this->motorcmds_; }
  std::vector<::RobotMotorCmd::MotorCmd>& motorcmds() { return this->motorcmds_; }
  void motorcmds(const std::vector<::RobotMotorCmd::MotorCmd>& _val_) { this->motorcmds_ = _val_; }
  void motorcmds(std::vector<::RobotMotorCmd::MotorCmd>&& _val_) { this->motorcmds_ = std::move(_val_); }
  const ::RobotMotorCmd::ControlCmd& controlcmd() const { return this->controlcmd_; }
  ::RobotMotorCmd::ControlCmd& controlcmd() { return this->controlcmd_; }
  void controlcmd(const ::RobotMotorCmd::ControlCmd& _val_) { this->controlcmd_ = _val_; }
  void controlcmd(::RobotMotorCmd::ControlCmd&& _val_) { this->controlcmd_ = std::move(_val_); }
  int64_t timestamp() const { return this->timestamp_; }
  int64_t& timestamp() { return this->timestamp_; }
  void timestamp(int64_t _val_) { this->timestamp_ = _val_; }

  bool operator==(const MotorCmdArray& _other) const
  {
    (void) _other;
    return motorcmds_ == _other.motorcmds_ &&
      controlcmd_ == _other.controlcmd_ &&
      timestamp_ == _other.timestamp_;
  }

  bool operator!=(const MotorCmdArray& _other) const
  {
    return !(*this == _other);
  }

};

std::ostream& operator<<(std::ostream& os, MotorCmdArray const& rhs);

} //namespace RobotMotorCmd

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::RobotMotorCmd::MotorCmd>::getTypeName()
{
  return "RobotMotorCmd::MotorCmd";
}

template <> constexpr bool TopicTraits<::RobotMotorCmd::MotorCmd>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPELIB
template<> constexpr unsigned int TopicTraits<::RobotMotorCmd::MotorCmd>::type_map_blob_sz() { return 406; }
template<> constexpr unsigned int TopicTraits<::RobotMotorCmd::MotorCmd>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::RobotMotorCmd::MotorCmd>::type_map_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x8b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0xb0,  0xf0,  0x7d,  0x2f,  0x64,  0xf5,  0xbc, 
 0x92,  0x74,  0xd7,  0x01,  0x61,  0x9d,  0x2c,  0x00,  0x73,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x63,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x5e,  0x0b,  0xdc,  0xbd,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x5e,  0x68,  0xca,  0x8a,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x45,  0x80,  0xc2,  0x74,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x26,  0xb5,  0x68,  0xe4,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x87,  0x22,  0x16,  0x52,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x06,  0x18,  0xbe,  0x95,  0x46,  0x00, 
 0xdb,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0xbd,  0x86,  0xb5,  0x45,  0x82,  0xf4,  0xd9, 
 0x98,  0x4e,  0xf9,  0x94,  0x99,  0x02,  0x52,  0x00,  0xc3,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x20,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x18,  0x00,  0x00,  0x00,  0x52,  0x6f,  0x62,  0x6f, 
 0x74,  0x4d,  0x6f,  0x74,  0x6f,  0x72,  0x43,  0x6d,  0x64,  0x3a,  0x3a,  0x4d,  0x6f,  0x74,  0x6f,  0x72, 
 0x43,  0x6d,  0x64,  0x00,  0x97,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x04,  0x00,  0x00,  0x00,  0x70,  0x6f,  0x73,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x76,  0x65,  0x6c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x04,  0x00,  0x00,  0x00,  0x74,  0x61,  0x75,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x6b,  0x70,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x03,  0x00,  0x00,  0x00,  0x6b,  0x64,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x17,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x06,  0x00, 
 0x09,  0x00,  0x00,  0x00,  0x6d,  0x6f,  0x74,  0x6f,  0x72,  0x5f,  0x69,  0x64,  0x00,  0x00,  0x00,  0x00, 
 0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0xbd,  0x86,  0xb5,  0x45,  0x82,  0xf4,  0xd9, 
 0x98,  0x4e,  0xf9,  0x94,  0x99,  0x02,  0x52,  0xf1,  0xb0,  0xf0,  0x7d,  0x2f,  0x64,  0xf5,  0xbc,  0x92, 
 0x74,  0xd7,  0x01,  0x61,  0x9d,  0x2c, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::RobotMotorCmd::MotorCmd>::type_info_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xb0,  0xf0,  0x7d,  0x2f,  0x64,  0xf5,  0xbc,  0x92,  0x74,  0xd7,  0x01, 
 0x61,  0x9d,  0x2c,  0x00,  0x77,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0xbd,  0x86,  0xb5,  0x45,  0x82,  0xf4,  0xd9,  0x98,  0x4e,  0xf9,  0x94, 
 0x99,  0x02,  0x52,  0x00,  0xc7,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPELIB

template <> constexpr const char* TopicTraits<::RobotMotorCmd::ControlCmd>::getTypeName()
{
  return "RobotMotorCmd::ControlCmd";
}

template <> constexpr bool TopicTraits<::RobotMotorCmd::ControlCmd>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPELIB
template<> constexpr unsigned int TopicTraits<::RobotMotorCmd::ControlCmd>::type_map_blob_sz() { return 274; }
template<> constexpr unsigned int TopicTraits<::RobotMotorCmd::ControlCmd>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::RobotMotorCmd::ControlCmd>::type_map_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x57,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0xe1,  0x7c,  0x91,  0xfd,  0x43,  0x2b,  0x5a, 
 0xe5,  0xf4,  0xa5,  0xfa,  0x0d,  0x35,  0x64,  0x00,  0x3f,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x2f,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x02,  0x0a,  0x42,  0xb4,  0x7e,  0xed,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x41,  0x8c,  0x55,  0x09,  0x00,  0x89,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0xf2,  0x1d,  0x8f,  0xd8,  0xe8,  0x7b,  0xea,  0x4e,  0x42,  0xa0,  0xdb,  0x7c, 
 0x1a,  0xaa,  0xec,  0x00,  0x71,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00,  0x22,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x1a,  0x00,  0x00,  0x00,  0x52,  0x6f,  0x62,  0x6f,  0x74,  0x4d,  0x6f,  0x74, 
 0x6f,  0x72,  0x43,  0x6d,  0x64,  0x3a,  0x3a,  0x43,  0x6f,  0x6e,  0x74,  0x72,  0x6f,  0x6c,  0x43,  0x6d, 
 0x64,  0x00,  0x00,  0x00,  0x41,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x1f,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x02,  0x0a,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x61,  0x78,  0x65,  0x73,  0x00,  0x00,  0x00,  0x00, 
 0x15,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x00,  0x07,  0x00,  0x00,  0x00, 
 0x61,  0x63,  0x74,  0x69,  0x6f,  0x6e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0xf2,  0x1d,  0x8f,  0xd8,  0xe8,  0x7b,  0xea,  0x4e,  0x42,  0xa0,  0xdb,  0x7c, 
 0x1a,  0xaa,  0xec,  0xf1,  0xe1,  0x7c,  0x91,  0xfd,  0x43,  0x2b,  0x5a,  0xe5,  0xf4,  0xa5,  0xfa,  0x0d, 
 0x35,  0x64, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::RobotMotorCmd::ControlCmd>::type_info_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xe1,  0x7c,  0x91,  0xfd,  0x43,  0x2b,  0x5a,  0xe5,  0xf4,  0xa5,  0xfa, 
 0x0d,  0x35,  0x64,  0x00,  0x43,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x1d,  0x8f,  0xd8,  0xe8,  0x7b,  0xea,  0x4e,  0x42,  0xa0,  0xdb,  0x7c, 
 0x1a,  0xaa,  0xec,  0x00,  0x75,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPELIB

template <> constexpr const char* TopicTraits<::RobotMotorCmd::MotorCmdArray>::getTypeName()
{
  return "RobotMotorCmd::MotorCmdArray";
}

template <> constexpr bool TopicTraits<::RobotMotorCmd::MotorCmdArray>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::RobotMotorCmd::MotorCmdArray>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPELIB
template<> constexpr unsigned int TopicTraits<::RobotMotorCmd::MotorCmdArray>::type_map_blob_sz() { return 1010; }
template<> constexpr unsigned int TopicTraits<::RobotMotorCmd::MotorCmdArray>::type_info_blob_sz() { return 196; }
template<> inline const uint8_t * TopicTraits<::RobotMotorCmd::MotorCmdArray>::type_map_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x5b,  0x01,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0xf1,  0x7e,  0x95,  0x44,  0xbf,  0xf2,  0x31,  0x6a, 
 0x20,  0xa2,  0x49,  0xad,  0xca,  0x6b,  0x9f,  0x00,  0x67,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x57,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x1e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf1,  0x01,  0x00,  0x12,  0xf1, 
 0xb0,  0xf0,  0x7d,  0x2f,  0x64,  0xf5,  0xbc,  0x92,  0x74,  0xd7,  0x01,  0x61,  0x9d,  0x2c,  0x84,  0xc3, 
 0xc2,  0xc8,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xe1, 
 0x7c,  0x91,  0xfd,  0x43,  0x2b,  0x5a,  0xe5,  0xf4,  0xa5,  0xfa,  0x0d,  0x35,  0x64,  0x5a,  0xbf,  0xbe, 
 0x5a,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x05,  0xd7, 
 0xe6,  0xd5,  0x5b,  0xf1,  0xb0,  0xf0,  0x7d,  0x2f,  0x64,  0xf5,  0xbc,  0x92,  0x74,  0xd7,  0x01,  0x61, 
 0x9d,  0x2c,  0x00,  0x00,  0x73,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x63,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x5e,  0x0b,  0xdc,  0xbd,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x5e,  0x68,  0xca,  0x8a,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x45,  0x80,  0xc2,  0x74,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x26,  0xb5,  0x68,  0xe4,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x87,  0x22,  0x16,  0x52,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x06,  0x18,  0xbe,  0x95,  0x46,  0xf1,  0xe1,  0x7c,  0x91,  0xfd, 
 0x43,  0x2b,  0x5a,  0xe5,  0xf4,  0xa5,  0xfa,  0x0d,  0x35,  0x64,  0x00,  0x00,  0x3f,  0x00,  0x00,  0x00, 
 0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x2f,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x02,  0x0a,  0x42,  0xb4,  0x7e,  0xed,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x41,  0x8c,  0x55,  0x09,  0x00, 
 0x29,  0x02,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0xf2,  0x15,  0x54,  0x1a,  0xc3,  0x4b,  0xa8,  0x6d, 
 0xc1,  0x51,  0x45,  0x9e,  0x52,  0xd0,  0xf6,  0x00,  0xb4,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x25,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1d,  0x00,  0x00,  0x00,  0x52,  0x6f,  0x62,  0x6f, 
 0x74,  0x4d,  0x6f,  0x74,  0x6f,  0x72,  0x43,  0x6d,  0x64,  0x3a,  0x3a,  0x4d,  0x6f,  0x74,  0x6f,  0x72, 
 0x43,  0x6d,  0x64,  0x41,  0x72,  0x72,  0x61,  0x79,  0x00,  0x00,  0x00,  0x00,  0x80,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x2c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf2, 
 0x01,  0x00,  0x12,  0xf2,  0xbd,  0x86,  0xb5,  0x45,  0x82,  0xf4,  0xd9,  0x98,  0x4e,  0xf9,  0x94,  0x99, 
 0x02,  0x52,  0x00,  0x00,  0x0a,  0x00,  0x00,  0x00,  0x6d,  0x6f,  0x74,  0x6f,  0x72,  0x63,  0x6d,  0x64, 
 0x73,  0x00,  0x00,  0x00,  0x29,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0x1d, 
 0x8f,  0xd8,  0xe8,  0x7b,  0xea,  0x4e,  0x42,  0xa0,  0xdb,  0x7c,  0x1a,  0xaa,  0xec,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x63,  0x6f,  0x6e,  0x74,  0x72,  0x6f,  0x6c,  0x63,  0x6d,  0x64,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x18,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x05,  0x00, 
 0x0a,  0x00,  0x00,  0x00,  0x74,  0x69,  0x6d,  0x65,  0x73,  0x74,  0x61,  0x6d,  0x70,  0x00,  0x00,  0x00, 
 0xf2,  0xbd,  0x86,  0xb5,  0x45,  0x82,  0xf4,  0xd9,  0x98,  0x4e,  0xf9,  0x94,  0x99,  0x02,  0x52,  0x00, 
 0xc3,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00,  0x20,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x18,  0x00,  0x00,  0x00,  0x52,  0x6f,  0x62,  0x6f,  0x74,  0x4d,  0x6f,  0x74,  0x6f,  0x72,  0x43,  0x6d, 
 0x64,  0x3a,  0x3a,  0x4d,  0x6f,  0x74,  0x6f,  0x72,  0x43,  0x6d,  0x64,  0x00,  0x97,  0x00,  0x00,  0x00, 
 0x06,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x70,  0x6f,  0x73,  0x00,  0x00,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x04,  0x00,  0x00,  0x00,  0x76,  0x65,  0x6c,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x74,  0x61,  0x75,  0x00,  0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x03,  0x00,  0x00,  0x00,  0x6b,  0x70,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x6b,  0x64,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x17,  0x00,  0x00,  0x00, 
 0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x06,  0x00,  0x09,  0x00,  0x00,  0x00,  0x6d,  0x6f,  0x74,  0x6f, 
 0x72,  0x5f,  0x69,  0x64,  0x00,  0x00,  0x00,  0xf2,  0x1d,  0x8f,  0xd8,  0xe8,  0x7b,  0xea,  0x4e,  0x42, 
 0xa0,  0xdb,  0x7c,  0x1a,  0xaa,  0xec,  0x00,  0x00,  0x71,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x22,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1a,  0x00,  0x00,  0x00,  0x52,  0x6f,  0x62,  0x6f, 
 0x74,  0x4d,  0x6f,  0x74,  0x6f,  0x72,  0x43,  0x6d,  0x64,  0x3a,  0x3a,  0x43,  0x6f,  0x6e,  0x74,  0x72, 
 0x6f,  0x6c,  0x43,  0x6d,  0x64,  0x00,  0x00,  0x00,  0x41,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x1f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x02,  0x0a,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x61,  0x78,  0x65,  0x73, 
 0x00,  0x00,  0x00,  0x00,  0x15,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x00, 
 0x07,  0x00,  0x00,  0x00,  0x61,  0x63,  0x74,  0x69,  0x6f,  0x6e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x5e,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0xf2,  0x15,  0x54,  0x1a,  0xc3,  0x4b,  0xa8,  0x6d, 
 0xc1,  0x51,  0x45,  0x9e,  0x52,  0xd0,  0xf6,  0xf1,  0x7e,  0x95,  0x44,  0xbf,  0xf2,  0x31,  0x6a,  0x20, 
 0xa2,  0x49,  0xad,  0xca,  0x6b,  0x9f,  0xf2,  0xbd,  0x86,  0xb5,  0x45,  0x82,  0xf4,  0xd9,  0x98,  0x4e, 
 0xf9,  0x94,  0x99,  0x02,  0x52,  0xf1,  0xb0,  0xf0,  0x7d,  0x2f,  0x64,  0xf5,  0xbc,  0x92,  0x74,  0xd7, 
 0x01,  0x61,  0x9d,  0x2c,  0xf2,  0x1d,  0x8f,  0xd8,  0xe8,  0x7b,  0xea,  0x4e,  0x42,  0xa0,  0xdb,  0x7c, 
 0x1a,  0xaa,  0xec,  0xf1,  0xe1,  0x7c,  0x91,  0xfd,  0x43,  0x2b,  0x5a,  0xe5,  0xf4,  0xa5,  0xfa,  0x0d, 
 0x35,  0x64, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::RobotMotorCmd::MotorCmdArray>::type_info_blob() {
  alignas(4) static const uint8_t blob[] = {
 0xc0,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x58,  0x00,  0x00,  0x00,  0x54,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x7e,  0x95,  0x44,  0xbf,  0xf2,  0x31,  0x6a,  0x20,  0xa2,  0x49,  0xad, 
 0xca,  0x6b,  0x9f,  0x00,  0x6b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x34,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0xb0,  0xf0,  0x7d,  0x2f,  0x64,  0xf5,  0xbc, 
 0x92,  0x74,  0xd7,  0x01,  0x61,  0x9d,  0x2c,  0x00,  0x77,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf1,  0xe1,  0x7c,  0x91,  0xfd,  0x43,  0x2b,  0x5a,  0xe5,  0xf4,  0xa5,  0xfa,  0x0d,  0x35,  0x64,  0x00, 
 0x43,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x58,  0x00,  0x00,  0x00,  0x54,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x15,  0x54,  0x1a,  0xc3,  0x4b,  0xa8,  0x6d,  0xc1,  0x51,  0x45,  0x9e, 
 0x52,  0xd0,  0xf6,  0x00,  0xb8,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x34,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0xbd,  0x86,  0xb5,  0x45,  0x82,  0xf4,  0xd9, 
 0x98,  0x4e,  0xf9,  0x94,  0x99,  0x02,  0x52,  0x00,  0xc7,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0x1d,  0x8f,  0xd8,  0xe8,  0x7b,  0xea,  0x4e,  0x42,  0xa0,  0xdb,  0x7c,  0x1a,  0xaa,  0xec,  0x00, 
 0x75,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPELIB

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::RobotMotorCmd::MotorCmd>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::RobotMotorCmd::MotorCmd>::getTypeName();
    }
};

template <>
struct topic_type_name<::RobotMotorCmd::ControlCmd>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::RobotMotorCmd::ControlCmd>::getTypeName();
    }
};

template <>
struct topic_type_name<::RobotMotorCmd::MotorCmdArray>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::RobotMotorCmd::MotorCmdArray>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::RobotMotorCmd::MotorCmd)
REGISTER_TOPIC_TYPE(::RobotMotorCmd::ControlCmd)
REGISTER_TOPIC_TYPE(::RobotMotorCmd::MotorCmdArray)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
const propvec &get_type_props<::RobotMotorCmd::MotorCmd>();

namespace {
  static const volatile propvec &properties___RobotMotorCmd__MotorCmd = get_type_props<::RobotMotorCmd::MotorCmd>();
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::RobotMotorCmd::MotorCmd& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.pos()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.vel()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.tau()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.kp()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.kd()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.motor_id()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::RobotMotorCmd::MotorCmd& instance, key_mode key) {
  const auto &props = get_type_props<::RobotMotorCmd::MotorCmd>();
  str.set_mode(cdr_stream::stream_mode::write, key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::RobotMotorCmd::MotorCmd& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.pos()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.vel()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.tau()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.kp()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.kd()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.motor_id()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::RobotMotorCmd::MotorCmd& instance, key_mode key) {
  const auto &props = get_type_props<::RobotMotorCmd::MotorCmd>();
  str.set_mode(cdr_stream::stream_mode::read, key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::RobotMotorCmd::MotorCmd& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.pos()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.vel()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.tau()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.kp()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.kd()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.motor_id()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::RobotMotorCmd::MotorCmd& instance, key_mode key) {
  const auto &props = get_type_props<::RobotMotorCmd::MotorCmd>();
  str.set_mode(cdr_stream::stream_mode::move, key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::RobotMotorCmd::MotorCmd& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.pos()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.vel()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.tau()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.kp()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.kd()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.motor_id()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::RobotMotorCmd::MotorCmd& instance, key_mode key) {
  const auto &props = get_type_props<::RobotMotorCmd::MotorCmd>();
  str.set_mode(cdr_stream::stream_mode::max, key);
  return max(str, instance, props.data()); 
}

template<>
const propvec &get_type_props<::RobotMotorCmd::ControlCmd>();

namespace {
  static const volatile propvec &properties___RobotMotorCmd__ControlCmd = get_type_props<::RobotMotorCmd::ControlCmd>();
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::RobotMotorCmd::ControlCmd& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!write(streamer, instance.axes()[0], instance.axes().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.action()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::RobotMotorCmd::ControlCmd& instance, key_mode key) {
  const auto &props = get_type_props<::RobotMotorCmd::ControlCmd>();
  str.set_mode(cdr_stream::stream_mode::write, key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::RobotMotorCmd::ControlCmd& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!read(streamer, instance.axes()[0], instance.axes().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.action()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::RobotMotorCmd::ControlCmd& instance, key_mode key) {
  const auto &props = get_type_props<::RobotMotorCmd::ControlCmd>();
  str.set_mode(cdr_stream::stream_mode::read, key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::RobotMotorCmd::ControlCmd& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!move(streamer, instance.axes()[0], instance.axes().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.action()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::RobotMotorCmd::ControlCmd& instance, key_mode key) {
  const auto &props = get_type_props<::RobotMotorCmd::ControlCmd>();
  str.set_mode(cdr_stream::stream_mode::move, key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::RobotMotorCmd::ControlCmd& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!max(streamer, instance.axes()[0], instance.axes().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.action()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::RobotMotorCmd::ControlCmd& instance, key_mode key) {
  const auto &props = get_type_props<::RobotMotorCmd::ControlCmd>();
  str.set_mode(cdr_stream::stream_mode::max, key);
  return max(str, instance, props.data()); 
}

template<>
const propvec &get_type_props<::RobotMotorCmd::MotorCmdArray>();

namespace {
  static const volatile propvec &properties___RobotMotorCmd__MotorCmdArray = get_type_props<::RobotMotorCmd::MotorCmdArray>();
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::RobotMotorCmd::MotorCmdArray& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, false))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.motorcmds().size());
      if (se_1 > 18 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      if (!write(streamer, instance.motorcmds()[i_1], prop))
        return false;
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.controlcmd(), prop))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::RobotMotorCmd::MotorCmdArray& instance, key_mode key) {
  const auto &props = get_type_props<::RobotMotorCmd::MotorCmdArray>();
  str.set_mode(cdr_stream::stream_mode::write, key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::RobotMotorCmd::MotorCmdArray& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, false))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.motorcmds().size());
      if (se_1 > 18 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.motorcmds().resize(se_1);
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      if (!read(streamer, instance.motorcmds()[i_1], prop))
        return false;
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.controlcmd(), prop))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::RobotMotorCmd::MotorCmdArray& instance, key_mode key) {
  const auto &props = get_type_props<::RobotMotorCmd::MotorCmdArray>();
  str.set_mode(cdr_stream::stream_mode::read, key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::RobotMotorCmd::MotorCmdArray& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, false))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.motorcmds().size());
      if (se_1 > 18 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      if (!move(streamer, instance.motorcmds()[i_1], prop))
        return false;
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.controlcmd(), prop))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::RobotMotorCmd::MotorCmdArray& instance, key_mode key) {
  const auto &props = get_type_props<::RobotMotorCmd::MotorCmdArray>();
  str.set_mode(cdr_stream::stream_mode::move, key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::RobotMotorCmd::MotorCmdArray& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, false))
        return false;
      {
      uint32_t se_1 = 18;
      if (!max(streamer, se_1))
        return false;
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      if (!max(streamer, instance.motorcmds()[i_1], prop))
        return false;
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.controlcmd(), prop))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::RobotMotorCmd::MotorCmdArray& instance, key_mode key) {
  const auto &props = get_type_props<::RobotMotorCmd::MotorCmdArray>();
  str.set_mode(cdr_stream::stream_mode::max, key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX__HOME_OEM_WORK_N2_DDS_DDS_TEST_DEMO_BUILD_ROBOT_MOTORCMD_HPP_08CB57AB4087A294ADC4C40C9961D701
