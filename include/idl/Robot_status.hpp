/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: /home/oem/work/n2/dds/dds-test-demo/idl/Robot_status.idl
  Source: /home/oem/work/n2/dds/dds-test-demo/build/Robot_status.hpp
  Cyclone DDS: v0.11.0

*****************************************************************/
#ifndef DDSCXX__HOME_OEM_WORK_N2_DDS_DDS_TEST_DEMO_BUILD_ROBOT_STATUS_HPP_659649EB79AFE07BC409F78864E2F500
#define DDSCXX__HOME_OEM_WORK_N2_DDS_DDS_TEST_DEMO_BUILD_ROBOT_STATUS_HPP_659649EB79AFE07BC409F78864E2F500

#include <utility>
#include <ostream>
#include <cstdint>
#include <array>
#include <vector>

namespace RobotStatus
{
class ImuData
{
private:
 std::array<double, 4> ori_ = { };
 std::array<double, 9> ori_cov_ = { };
 std::array<double, 3> angular_vel_ = { };
 std::array<double, 9> angular_vel_cov_ = { };
 std::array<double, 3> linear_acc_ = { };
 std::array<double, 9> linear_acc_cov_ = { };

public:
  ImuData() = default;

  explicit ImuData(
    const std::array<double, 4>& ori,
    const std::array<double, 9>& ori_cov,
    const std::array<double, 3>& angular_vel,
    const std::array<double, 9>& angular_vel_cov,
    const std::array<double, 3>& linear_acc,
    const std::array<double, 9>& linear_acc_cov) :
    ori_(ori),
    ori_cov_(ori_cov),
    angular_vel_(angular_vel),
    angular_vel_cov_(angular_vel_cov),
    linear_acc_(linear_acc),
    linear_acc_cov_(linear_acc_cov) { }

  const std::array<double, 4>& ori() const { return this->ori_; }
  std::array<double, 4>& ori() { return this->ori_; }
  void ori(const std::array<double, 4>& _val_) { this->ori_ = _val_; }
  void ori(std::array<double, 4>&& _val_) { this->ori_ = std::move(_val_); }
  const std::array<double, 9>& ori_cov() const { return this->ori_cov_; }
  std::array<double, 9>& ori_cov() { return this->ori_cov_; }
  void ori_cov(const std::array<double, 9>& _val_) { this->ori_cov_ = _val_; }
  void ori_cov(std::array<double, 9>&& _val_) { this->ori_cov_ = std::move(_val_); }
  const std::array<double, 3>& angular_vel() const { return this->angular_vel_; }
  std::array<double, 3>& angular_vel() { return this->angular_vel_; }
  void angular_vel(const std::array<double, 3>& _val_) { this->angular_vel_ = _val_; }
  void angular_vel(std::array<double, 3>&& _val_) { this->angular_vel_ = std::move(_val_); }
  const std::array<double, 9>& angular_vel_cov() const { return this->angular_vel_cov_; }
  std::array<double, 9>& angular_vel_cov() { return this->angular_vel_cov_; }
  void angular_vel_cov(const std::array<double, 9>& _val_) { this->angular_vel_cov_ = _val_; }
  void angular_vel_cov(std::array<double, 9>&& _val_) { this->angular_vel_cov_ = std::move(_val_); }
  const std::array<double, 3>& linear_acc() const { return this->linear_acc_; }
  std::array<double, 3>& linear_acc() { return this->linear_acc_; }
  void linear_acc(const std::array<double, 3>& _val_) { this->linear_acc_ = _val_; }
  void linear_acc(std::array<double, 3>&& _val_) { this->linear_acc_ = std::move(_val_); }
  const std::array<double, 9>& linear_acc_cov() const { return this->linear_acc_cov_; }
  std::array<double, 9>& linear_acc_cov() { return this->linear_acc_cov_; }
  void linear_acc_cov(const std::array<double, 9>& _val_) { this->linear_acc_cov_ = _val_; }
  void linear_acc_cov(std::array<double, 9>&& _val_) { this->linear_acc_cov_ = std::move(_val_); }

  bool operator==(const ImuData& _other) const
  {
    (void) _other;
    return ori_ == _other.ori_ &&
      ori_cov_ == _other.ori_cov_ &&
      angular_vel_ == _other.angular_vel_ &&
      angular_vel_cov_ == _other.angular_vel_cov_ &&
      linear_acc_ == _other.linear_acc_ &&
      linear_acc_cov_ == _other.linear_acc_cov_;
  }

  bool operator!=(const ImuData& _other) const
  {
    return !(*this == _other);
  }

};

std::ostream& operator<<(std::ostream& os, ImuData const& rhs);

class JoyData
{
private:
 std::array<double, 2> axes_ = { };
 std::array<int32_t, 14> button_ = { };

public:
  JoyData() = default;

  explicit JoyData(
    const std::array<double, 2>& axes,
    const std::array<int32_t, 14>& button) :
    axes_(axes),
    button_(button) { }

  const std::array<double, 2>& axes() const { return this->axes_; }
  std::array<double, 2>& axes() { return this->axes_; }
  void axes(const std::array<double, 2>& _val_) { this->axes_ = _val_; }
  void axes(std::array<double, 2>&& _val_) { this->axes_ = std::move(_val_); }
  const std::array<int32_t, 14>& button() const { return this->button_; }
  std::array<int32_t, 14>& button() { return this->button_; }
  void button(const std::array<int32_t, 14>& _val_) { this->button_ = _val_; }
  void button(std::array<int32_t, 14>&& _val_) { this->button_ = std::move(_val_); }

  bool operator==(const JoyData& _other) const
  {
    (void) _other;
    return axes_ == _other.axes_ &&
      button_ == _other.button_;
  }

  bool operator!=(const JoyData& _other) const
  {
    return !(*this == _other);
  }

};

std::ostream& operator<<(std::ostream& os, JoyData const& rhs);

class MotorState
{
private:
 double pos_ = 0.0;
 double vel_ = 0.0;
 double tau_ = 0.0;
 uint16_t motor_id_ = 0;
 uint16_t error_ = 0;
 int32_t temperature_ = 0;

public:
  MotorState() = default;

  explicit MotorState(
    double pos,
    double vel,
    double tau,
    uint16_t motor_id,
    uint16_t error,
    int32_t temperature) :
    pos_(pos),
    vel_(vel),
    tau_(tau),
    motor_id_(motor_id),
    error_(error),
    temperature_(temperature) { }

  double pos() const { return this->pos_; }
  double& pos() { return this->pos_; }
  void pos(double _val_) { this->pos_ = _val_; }
  double vel() const { return this->vel_; }
  double& vel() { return this->vel_; }
  void vel(double _val_) { this->vel_ = _val_; }
  double tau() const { return this->tau_; }
  double& tau() { return this->tau_; }
  void tau(double _val_) { this->tau_ = _val_; }
  uint16_t motor_id() const { return this->motor_id_; }
  uint16_t& motor_id() { return this->motor_id_; }
  void motor_id(uint16_t _val_) { this->motor_id_ = _val_; }
  uint16_t error() const { return this->error_; }
  uint16_t& error() { return this->error_; }
  void error(uint16_t _val_) { this->error_ = _val_; }
  int32_t temperature() const { return this->temperature_; }
  int32_t& temperature() { return this->temperature_; }
  void temperature(int32_t _val_) { this->temperature_ = _val_; }

  bool operator==(const MotorState& _other) const
  {
    (void) _other;
    return pos_ == _other.pos_ &&
      vel_ == _other.vel_ &&
      tau_ == _other.tau_ &&
      motor_id_ == _other.motor_id_ &&
      error_ == _other.error_ &&
      temperature_ == _other.temperature_;
  }

  bool operator!=(const MotorState& _other) const
  {
    return !(*this == _other);
  }

};

std::ostream& operator<<(std::ostream& os, MotorState const& rhs);

class MotorStateArray
{
private:
 std::vector<::RobotStatus::MotorState> motorstates_;
 int64_t timestamp_ = 0;

public:
  MotorStateArray() = default;

  explicit MotorStateArray(
    const std::vector<::RobotStatus::MotorState>& motorstates,
    int64_t timestamp) :
    motorstates_(motorstates),
    timestamp_(timestamp) { }

  const std::vector<::RobotStatus::MotorState>& motorstates() const { return this->motorstates_; }
  std::vector<::RobotStatus::MotorState>& motorstates() { return this->motorstates_; }
  void motorstates(const std::vector<::RobotStatus::MotorState>& _val_) { this->motorstates_ = _val_; }
  void motorstates(std::vector<::RobotStatus::MotorState>&& _val_) { this->motorstates_ = std::move(_val_); }
  int64_t timestamp() const { return this->timestamp_; }
  int64_t& timestamp() { return this->timestamp_; }
  void timestamp(int64_t _val_) { this->timestamp_ = _val_; }

  bool operator==(const MotorStateArray& _other) const
  {
    (void) _other;
    return motorstates_ == _other.motorstates_ &&
      timestamp_ == _other.timestamp_;
  }

  bool operator!=(const MotorStateArray& _other) const
  {
    return !(*this == _other);
  }

};

std::ostream& operator<<(std::ostream& os, MotorStateArray const& rhs);

class StatusData
{
private:
 ::RobotStatus::ImuData imudata_;
 ::RobotStatus::JoyData joydata_;
 ::RobotStatus::MotorStateArray motorstatearray_;

public:
  StatusData() = default;

  explicit StatusData(
    const ::RobotStatus::ImuData& imudata,
    const ::RobotStatus::JoyData& joydata,
    const ::RobotStatus::MotorStateArray& motorstatearray) :
    imudata_(imudata),
    joydata_(joydata),
    motorstatearray_(motorstatearray) { }

  const ::RobotStatus::ImuData& imudata() const { return this->imudata_; }
  ::RobotStatus::ImuData& imudata() { return this->imudata_; }
  void imudata(const ::RobotStatus::ImuData& _val_) { this->imudata_ = _val_; }
  void imudata(::RobotStatus::ImuData&& _val_) { this->imudata_ = std::move(_val_); }
  const ::RobotStatus::JoyData& joydata() const { return this->joydata_; }
  ::RobotStatus::JoyData& joydata() { return this->joydata_; }
  void joydata(const ::RobotStatus::JoyData& _val_) { this->joydata_ = _val_; }
  void joydata(::RobotStatus::JoyData&& _val_) { this->joydata_ = std::move(_val_); }
  const ::RobotStatus::MotorStateArray& motorstatearray() const { return this->motorstatearray_; }
  ::RobotStatus::MotorStateArray& motorstatearray() { return this->motorstatearray_; }
  void motorstatearray(const ::RobotStatus::MotorStateArray& _val_) { this->motorstatearray_ = _val_; }
  void motorstatearray(::RobotStatus::MotorStateArray&& _val_) { this->motorstatearray_ = std::move(_val_); }

  bool operator==(const StatusData& _other) const
  {
    (void) _other;
    return imudata_ == _other.imudata_ &&
      joydata_ == _other.joydata_ &&
      motorstatearray_ == _other.motorstatearray_;
  }

  bool operator!=(const StatusData& _other) const
  {
    return !(*this == _other);
  }

};

std::ostream& operator<<(std::ostream& os, StatusData const& rhs);

} //namespace RobotStatus

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::RobotStatus::ImuData>::getTypeName()
{
  return "RobotStatus::ImuData";
}

template <> constexpr bool TopicTraits<::RobotStatus::ImuData>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPELIB
template<> constexpr unsigned int TopicTraits<::RobotStatus::ImuData>::type_map_blob_sz() { return 590; }
template<> constexpr unsigned int TopicTraits<::RobotStatus::ImuData>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::RobotStatus::ImuData>::type_map_blob() {
  alignas(4) static const uint8_t blob[] = {
 0xd2,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0x8d,  0x03,  0x78,  0xb7,  0xbd,  0x37,  0xbc, 
 0xca,  0x35,  0x03,  0x5a,  0x71,  0xf7,  0x11,  0x00,  0xba,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0xaa,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x04,  0x0a,  0x16,  0xb1,  0xc8,  0x3d,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x09,  0x0a,  0x46,  0x23,  0xd1,  0x1e,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x03,  0x0a,  0xcc,  0x79, 
 0x71,  0xd2,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x09,  0x0a,  0xa9,  0x76,  0xb2,  0x81,  0x00,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x03,  0x0a,  0x8b,  0x2d,  0x6b,  0x38,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00, 
 0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x09,  0x0a,  0xc7,  0xcb,  0x45,  0xc2,  0x00,  0x00,  0x49,  0x01,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0xf2,  0x03,  0xd2,  0x66,  0xbf,  0xaf,  0x04,  0x70,  0x67,  0x57,  0x34,  0xc9,  0xd5,  0x85,  0xa6,  0x00, 
 0x31,  0x01,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00,  0x1d,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x15,  0x00,  0x00,  0x00,  0x52,  0x6f,  0x62,  0x6f,  0x74,  0x53,  0x74,  0x61,  0x74,  0x75,  0x73,  0x3a, 
 0x3a,  0x49,  0x6d,  0x75,  0x44,  0x61,  0x74,  0x61,  0x00,  0x00,  0x00,  0x00,  0x05,  0x01,  0x00,  0x00, 
 0x06,  0x00,  0x00,  0x00,  0x1e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x04,  0x0a,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x6f,  0x72,  0x69,  0x00,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x09,  0x0a,  0x00,  0x00, 
 0x08,  0x00,  0x00,  0x00,  0x6f,  0x72,  0x69,  0x5f,  0x63,  0x6f,  0x76,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x26,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x03,  0x0a,  0x00,  0x00,  0x0c,  0x00,  0x00,  0x00,  0x61,  0x6e,  0x67,  0x75, 
 0x6c,  0x61,  0x72,  0x5f,  0x76,  0x65,  0x6c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x2a,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x09,  0x0a,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x61,  0x6e,  0x67,  0x75,  0x6c,  0x61,  0x72,  0x5f, 
 0x76,  0x65,  0x6c,  0x5f,  0x63,  0x6f,  0x76,  0x00,  0x00,  0x00,  0x00,  0x00,  0x25,  0x00,  0x00,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x03,  0x0a,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x6c,  0x69,  0x6e,  0x65,  0x61,  0x72,  0x5f,  0x61, 
 0x63,  0x63,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x29,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x09,  0x0a,  0x00,  0x00, 
 0x0f,  0x00,  0x00,  0x00,  0x6c,  0x69,  0x6e,  0x65,  0x61,  0x72,  0x5f,  0x61,  0x63,  0x63,  0x5f,  0x63, 
 0x6f,  0x76,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0xf2,  0x03,  0xd2,  0x66,  0xbf,  0xaf,  0x04,  0x70,  0x67,  0x57,  0x34,  0xc9,  0xd5,  0x85,  0xa6,  0xf1, 
 0x8d,  0x03,  0x78,  0xb7,  0xbd,  0x37,  0xbc,  0xca,  0x35,  0x03,  0x5a,  0x71,  0xf7,  0x11, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::RobotStatus::ImuData>::type_info_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x8d,  0x03,  0x78,  0xb7,  0xbd,  0x37,  0xbc,  0xca,  0x35,  0x03,  0x5a, 
 0x71,  0xf7,  0x11,  0x00,  0xbe,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x03,  0xd2,  0x66,  0xbf,  0xaf,  0x04,  0x70,  0x67,  0x57,  0x34,  0xc9, 
 0xd5,  0x85,  0xa6,  0x00,  0x35,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPELIB

template <> constexpr const char* TopicTraits<::RobotStatus::JoyData>::getTypeName()
{
  return "RobotStatus::JoyData";
}

template <> constexpr bool TopicTraits<::RobotStatus::JoyData>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPELIB
template<> constexpr unsigned int TopicTraits<::RobotStatus::JoyData>::type_map_blob_sz() { return 294; }
template<> constexpr unsigned int TopicTraits<::RobotStatus::JoyData>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::RobotStatus::JoyData>::type_map_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x62,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0x94,  0x6f,  0x0c,  0x0e,  0x80,  0xac,  0xa0, 
 0xa8,  0xbb,  0xd8,  0x38,  0x87,  0x65,  0x29,  0x00,  0x4a,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x3a,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x02,  0x0a,  0x42,  0xb4,  0x7e,  0xed,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x0e,  0x04,  0xce,  0x50,  0xa0,  0x93,  0x00,  0x00,  0x91,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0xf2,  0x96,  0xfa,  0xd0,  0xfa,  0x3e,  0x59,  0xa3,  0xc2,  0x0e,  0xc4,  0xad,  0xe1,  0x5e,  0xf0,  0x00, 
 0x79,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00,  0x1d,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x15,  0x00,  0x00,  0x00,  0x52,  0x6f,  0x62,  0x6f,  0x74,  0x53,  0x74,  0x61,  0x74,  0x75,  0x73,  0x3a, 
 0x3a,  0x4a,  0x6f,  0x79,  0x44,  0x61,  0x74,  0x61,  0x00,  0x00,  0x00,  0x00,  0x4d,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x1f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x02,  0x0a,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00, 
 0x61,  0x78,  0x65,  0x73,  0x00,  0x00,  0x00,  0x00,  0x21,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x0e,  0x04,  0x00,  0x00, 
 0x07,  0x00,  0x00,  0x00,  0x62,  0x75,  0x74,  0x74,  0x6f,  0x6e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x96,  0xfa,  0xd0,  0xfa,  0x3e,  0x59,  0xa3, 
 0xc2,  0x0e,  0xc4,  0xad,  0xe1,  0x5e,  0xf0,  0xf1,  0x94,  0x6f,  0x0c,  0x0e,  0x80,  0xac,  0xa0,  0xa8, 
 0xbb,  0xd8,  0x38,  0x87,  0x65,  0x29, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::RobotStatus::JoyData>::type_info_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x94,  0x6f,  0x0c,  0x0e,  0x80,  0xac,  0xa0,  0xa8,  0xbb,  0xd8,  0x38, 
 0x87,  0x65,  0x29,  0x00,  0x4e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x96,  0xfa,  0xd0,  0xfa,  0x3e,  0x59,  0xa3,  0xc2,  0x0e,  0xc4,  0xad, 
 0xe1,  0x5e,  0xf0,  0x00,  0x7d,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPELIB

template <> constexpr const char* TopicTraits<::RobotStatus::MotorState>::getTypeName()
{
  return "RobotStatus::MotorState";
}

template <> constexpr bool TopicTraits<::RobotStatus::MotorState>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPELIB
template<> constexpr unsigned int TopicTraits<::RobotStatus::MotorState>::type_map_blob_sz() { return 414; }
template<> constexpr unsigned int TopicTraits<::RobotStatus::MotorState>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::RobotStatus::MotorState>::type_map_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x8b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0xf7,  0xd0,  0x54,  0xd6,  0xe6,  0xce,  0x13, 
 0x7b,  0x25,  0x46,  0x7c,  0x54,  0x8d,  0xd6,  0x00,  0x73,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x63,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x5e,  0x0b,  0xdc,  0xbd,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x5e,  0x68,  0xca,  0x8a,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x45,  0x80,  0xc2,  0x74,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x06,  0x18,  0xbe,  0x95,  0x46,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x06,  0xcb,  0x5e,  0x10,  0x0e,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0xee,  0xf4,  0x38,  0xf7,  0x00, 
 0xe2,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0xde,  0x57,  0x7d,  0x0f,  0x4c,  0x6a,  0xb5, 
 0xf6,  0x6f,  0x8d,  0x1f,  0x4a,  0xd0,  0xf5,  0x00,  0xca,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x20,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x18,  0x00,  0x00,  0x00,  0x52,  0x6f,  0x62,  0x6f, 
 0x74,  0x53,  0x74,  0x61,  0x74,  0x75,  0x73,  0x3a,  0x3a,  0x4d,  0x6f,  0x74,  0x6f,  0x72,  0x53,  0x74, 
 0x61,  0x74,  0x65,  0x00,  0x9e,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x04,  0x00,  0x00,  0x00,  0x70,  0x6f,  0x73,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x76,  0x65,  0x6c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x04,  0x00,  0x00,  0x00,  0x74,  0x61,  0x75,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x17,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x06,  0x00, 
 0x09,  0x00,  0x00,  0x00,  0x6d,  0x6f,  0x74,  0x6f,  0x72,  0x5f,  0x69,  0x64,  0x00,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x06,  0x00,  0x06,  0x00,  0x00,  0x00, 
 0x65,  0x72,  0x72,  0x6f,  0x72,  0x00,  0x00,  0x00,  0x1a,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x04,  0x00,  0x0c,  0x00,  0x00,  0x00,  0x74,  0x65,  0x6d,  0x70,  0x65,  0x72,  0x61,  0x74, 
 0x75,  0x72,  0x65,  0x00,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0xf2,  0xde,  0x57,  0x7d,  0x0f,  0x4c,  0x6a,  0xb5,  0xf6,  0x6f,  0x8d,  0x1f,  0x4a,  0xd0,  0xf5,  0xf1, 
 0xf7,  0xd0,  0x54,  0xd6,  0xe6,  0xce,  0x13,  0x7b,  0x25,  0x46,  0x7c,  0x54,  0x8d,  0xd6, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::RobotStatus::MotorState>::type_info_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xf7,  0xd0,  0x54,  0xd6,  0xe6,  0xce,  0x13,  0x7b,  0x25,  0x46,  0x7c, 
 0x54,  0x8d,  0xd6,  0x00,  0x77,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0xde,  0x57,  0x7d,  0x0f,  0x4c,  0x6a,  0xb5,  0xf6,  0x6f,  0x8d,  0x1f, 
 0x4a,  0xd0,  0xf5,  0x00,  0xce,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPELIB

template <> constexpr const char* TopicTraits<::RobotStatus::MotorStateArray>::getTypeName()
{
  return "RobotStatus::MotorStateArray";
}

template <> constexpr bool TopicTraits<::RobotStatus::MotorStateArray>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::RobotStatus::MotorStateArray>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPELIB
template<> constexpr unsigned int TopicTraits<::RobotStatus::MotorStateArray>::type_map_blob_sz() { return 692; }
template<> constexpr unsigned int TopicTraits<::RobotStatus::MotorStateArray>::type_info_blob_sz() { return 148; }
template<> inline const uint8_t * TopicTraits<::RobotStatus::MotorStateArray>::type_map_blob() {
  alignas(4) static const uint8_t blob[] = {
 0xe7,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0xf1,  0xee,  0xf3,  0xd7,  0x1b,  0x32,  0xe7,  0xf9, 
 0x4e,  0x73,  0xd3,  0xc4,  0xfc,  0xd9,  0x31,  0x00,  0x47,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x37,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x1e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf1,  0x01,  0x00,  0x12,  0xf1, 
 0xf7,  0xd0,  0x54,  0xd6,  0xe6,  0xce,  0x13,  0x7b,  0x25,  0x46,  0x7c,  0x54,  0x8d,  0xd6,  0x36,  0xc1, 
 0x6a,  0x5a,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x05,  0xd7, 
 0xe6,  0xd5,  0x5b,  0xf1,  0xf7,  0xd0,  0x54,  0xd6,  0xe6,  0xce,  0x13,  0x7b,  0x25,  0x46,  0x7c,  0x54, 
 0x8d,  0xd6,  0x00,  0x00,  0x73,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x63,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x5e,  0x0b,  0xdc,  0xbd,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x5e,  0x68,  0xca,  0x8a,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x45,  0x80,  0xc2,  0x74,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x06,  0x18,  0xbe,  0x95,  0x46,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x06,  0xcb,  0x5e,  0x10,  0x0e,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0xee,  0xf4,  0x38,  0xf7,  0x00,  0x7e,  0x01,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0xf2,  0x2a,  0x24,  0x55,  0xec,  0x93,  0x90,  0x38,  0xb6,  0xd8,  0x5c,  0xc2, 
 0x1c,  0x28,  0x48,  0x00,  0x88,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00,  0x25,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x1d,  0x00,  0x00,  0x00,  0x52,  0x6f,  0x62,  0x6f,  0x74,  0x53,  0x74,  0x61, 
 0x74,  0x75,  0x73,  0x3a,  0x3a,  0x4d,  0x6f,  0x74,  0x6f,  0x72,  0x53,  0x74,  0x61,  0x74,  0x65,  0x41, 
 0x72,  0x72,  0x61,  0x79,  0x00,  0x00,  0x00,  0x00,  0x54,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x2e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf2,  0x01,  0x00,  0x12,  0xf2, 
 0xde,  0x57,  0x7d,  0x0f,  0x4c,  0x6a,  0xb5,  0xf6,  0x6f,  0x8d,  0x1f,  0x4a,  0xd0,  0xf5,  0x00,  0x00, 
 0x0c,  0x00,  0x00,  0x00,  0x6d,  0x6f,  0x74,  0x6f,  0x72,  0x73,  0x74,  0x61,  0x74,  0x65,  0x73,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x18,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x05,  0x00, 
 0x0a,  0x00,  0x00,  0x00,  0x74,  0x69,  0x6d,  0x65,  0x73,  0x74,  0x61,  0x6d,  0x70,  0x00,  0x00,  0x00, 
 0xf2,  0xde,  0x57,  0x7d,  0x0f,  0x4c,  0x6a,  0xb5,  0xf6,  0x6f,  0x8d,  0x1f,  0x4a,  0xd0,  0xf5,  0x00, 
 0xca,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00,  0x20,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x18,  0x00,  0x00,  0x00,  0x52,  0x6f,  0x62,  0x6f,  0x74,  0x53,  0x74,  0x61,  0x74,  0x75,  0x73,  0x3a, 
 0x3a,  0x4d,  0x6f,  0x74,  0x6f,  0x72,  0x53,  0x74,  0x61,  0x74,  0x65,  0x00,  0x9e,  0x00,  0x00,  0x00, 
 0x06,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x70,  0x6f,  0x73,  0x00,  0x00,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x04,  0x00,  0x00,  0x00,  0x76,  0x65,  0x6c,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x74,  0x61,  0x75,  0x00,  0x00,  0x00,  0x00,  0x00,  0x17,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x06,  0x00,  0x09,  0x00,  0x00,  0x00,  0x6d,  0x6f,  0x74,  0x6f, 
 0x72,  0x5f,  0x69,  0x64,  0x00,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x06,  0x00,  0x06,  0x00,  0x00,  0x00,  0x65,  0x72,  0x72,  0x6f,  0x72,  0x00,  0x00,  0x00, 
 0x1a,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x00,  0x0c,  0x00,  0x00,  0x00, 
 0x74,  0x65,  0x6d,  0x70,  0x65,  0x72,  0x61,  0x74,  0x75,  0x72,  0x65,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x40,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0xf2,  0x2a,  0x24,  0x55,  0xec,  0x93,  0x90,  0x38, 
 0xb6,  0xd8,  0x5c,  0xc2,  0x1c,  0x28,  0x48,  0xf1,  0xee,  0xf3,  0xd7,  0x1b,  0x32,  0xe7,  0xf9,  0x4e, 
 0x73,  0xd3,  0xc4,  0xfc,  0xd9,  0x31,  0xf2,  0xde,  0x57,  0x7d,  0x0f,  0x4c,  0x6a,  0xb5,  0xf6,  0x6f, 
 0x8d,  0x1f,  0x4a,  0xd0,  0xf5,  0xf1,  0xf7,  0xd0,  0x54,  0xd6,  0xe6,  0xce,  0x13,  0x7b,  0x25,  0x46, 
 0x7c,  0x54,  0x8d,  0xd6, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::RobotStatus::MotorStateArray>::type_info_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x90,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x40,  0x00,  0x00,  0x00,  0x3c,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xee,  0xf3,  0xd7,  0x1b,  0x32,  0xe7,  0xf9,  0x4e,  0x73,  0xd3,  0xc4, 
 0xfc,  0xd9,  0x31,  0x00,  0x4b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0xf7,  0xd0,  0x54,  0xd6,  0xe6,  0xce,  0x13, 
 0x7b,  0x25,  0x46,  0x7c,  0x54,  0x8d,  0xd6,  0x00,  0x77,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40, 
 0x40,  0x00,  0x00,  0x00,  0x3c,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0x2a,  0x24,  0x55, 
 0xec,  0x93,  0x90,  0x38,  0xb6,  0xd8,  0x5c,  0xc2,  0x1c,  0x28,  0x48,  0x00,  0x8c,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0xde,  0x57,  0x7d,  0x0f,  0x4c,  0x6a,  0xb5,  0xf6,  0x6f,  0x8d,  0x1f,  0x4a,  0xd0,  0xf5,  0x00, 
 0xce,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPELIB

template <> constexpr const char* TopicTraits<::RobotStatus::StatusData>::getTypeName()
{
  return "RobotStatus::StatusData";
}

template <> constexpr bool TopicTraits<::RobotStatus::StatusData>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::RobotStatus::StatusData>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPELIB
template<> constexpr unsigned int TopicTraits<::RobotStatus::StatusData>::type_map_blob_sz() { return 1890; }
template<> constexpr unsigned int TopicTraits<::RobotStatus::StatusData>::type_info_blob_sz() { return 292; }
template<> inline const uint8_t * TopicTraits<::RobotStatus::StatusData>::type_map_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x9b,  0x02,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0xf1,  0x4d,  0x53,  0xc3,  0xf9,  0x93,  0xb4,  0x12, 
 0xcc,  0xd8,  0xb9,  0x9d,  0xcb,  0x98,  0xf2,  0x00,  0x71,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x61,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0x8d,  0x03,  0x78,  0xb7,  0xbd, 
 0x37,  0xbc,  0xca,  0x35,  0x03,  0x5a,  0x71,  0xf7,  0x11,  0x2e,  0x8e,  0x99,  0xb4,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0x94,  0x6f,  0x0c,  0x0e,  0x80, 
 0xac,  0xa0,  0xa8,  0xbb,  0xd8,  0x38,  0x87,  0x65,  0x29,  0xd1,  0x87,  0x96,  0xe2,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xee,  0xf3,  0xd7,  0x1b,  0x32, 
 0xe7,  0xf9,  0x4e,  0x73,  0xd3,  0xc4,  0xfc,  0xd9,  0x31,  0xee,  0x1b,  0x8f,  0x2c,  0xf1,  0x8d,  0x03, 
 0x78,  0xb7,  0xbd,  0x37,  0xbc,  0xca,  0x35,  0x03,  0x5a,  0x71,  0xf7,  0x11,  0xba,  0x00,  0x00,  0x00, 
 0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0xaa,  0x00,  0x00,  0x00, 
 0x06,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x04,  0x0a,  0x16,  0xb1,  0xc8,  0x3d,  0x00,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x09,  0x0a,  0x46,  0x23,  0xd1,  0x1e,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x03,  0x0a,  0xcc,  0x79,  0x71,  0xd2,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x09,  0x0a,  0xa9,  0x76, 
 0xb2,  0x81,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x03,  0x0a,  0x8b,  0x2d,  0x6b,  0x38,  0x00,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x09,  0x0a,  0xc7,  0xcb,  0x45,  0xc2,  0xf1,  0x94,  0x6f,  0x0c,  0x0e,  0x80, 
 0xac,  0xa0,  0xa8,  0xbb,  0xd8,  0x38,  0x87,  0x65,  0x29,  0x00,  0x00,  0x00,  0x4a,  0x00,  0x00,  0x00, 
 0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x3a,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x02,  0x0a,  0x42,  0xb4,  0x7e,  0xed,  0x00,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x0e,  0x04,  0xce,  0x50,  0xa0,  0x93,  0xf1,  0xee,  0xf3,  0xd7,  0x1b,  0x32, 
 0xe7,  0xf9,  0x4e,  0x73,  0xd3,  0xc4,  0xfc,  0xd9,  0x31,  0x00,  0x00,  0x00,  0x47,  0x00,  0x00,  0x00, 
 0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x37,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x1e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf1, 
 0x01,  0x00,  0x12,  0xf1,  0xf7,  0xd0,  0x54,  0xd6,  0xe6,  0xce,  0x13,  0x7b,  0x25,  0x46,  0x7c,  0x54, 
 0x8d,  0xd6,  0x36,  0xc1,  0x6a,  0x5a,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x05,  0xd7,  0xe6,  0xd5,  0x5b,  0xf1,  0xf7,  0xd0,  0x54,  0xd6,  0xe6,  0xce,  0x13,  0x7b, 
 0x25,  0x46,  0x7c,  0x54,  0x8d,  0xd6,  0x00,  0x00,  0x73,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x63,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x5e,  0x0b,  0xdc,  0xbd,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x5e,  0x68,  0xca,  0x8a,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x45,  0x80,  0xc2,  0x74,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x06,  0x18,  0xbe,  0x95,  0x46,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x06,  0xcb,  0x5e,  0x10,  0x0e,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0xee,  0xf4,  0x38,  0xf7,  0x00, 
 0x1e,  0x04,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0xf2,  0xe5,  0x42,  0x04,  0x3f,  0x0e,  0x3a,  0x58, 
 0x70,  0x43,  0xc8,  0x0c,  0x8a,  0xf6,  0x5f,  0x00,  0xba,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x20,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x18,  0x00,  0x00,  0x00,  0x52,  0x6f,  0x62,  0x6f, 
 0x74,  0x53,  0x74,  0x61,  0x74,  0x75,  0x73,  0x3a,  0x3a,  0x53,  0x74,  0x61,  0x74,  0x75,  0x73,  0x44, 
 0x61,  0x74,  0x61,  0x00,  0x8e,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x26,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0x03,  0xd2,  0x66,  0xbf,  0xaf,  0x04,  0x70,  0x67,  0x57, 
 0x34,  0xc9,  0xd5,  0x85,  0xa6,  0x00,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00,  0x69,  0x6d,  0x75,  0x64, 
 0x61,  0x74,  0x61,  0x00,  0x00,  0x00,  0x00,  0x00,  0x26,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0xf2,  0x96,  0xfa,  0xd0,  0xfa,  0x3e,  0x59,  0xa3,  0xc2,  0x0e,  0xc4,  0xad,  0xe1,  0x5e, 
 0xf0,  0x00,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00,  0x6a,  0x6f,  0x79,  0x64,  0x61,  0x74,  0x61,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x2e,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0x2a, 
 0x24,  0x55,  0xec,  0x93,  0x90,  0x38,  0xb6,  0xd8,  0x5c,  0xc2,  0x1c,  0x28,  0x48,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x6d,  0x6f,  0x74,  0x6f,  0x72,  0x73,  0x74,  0x61,  0x74,  0x65,  0x61,  0x72, 
 0x72,  0x61,  0x79,  0x00,  0x00,  0x00,  0xf2,  0x03,  0xd2,  0x66,  0xbf,  0xaf,  0x04,  0x70,  0x67,  0x57, 
 0x34,  0xc9,  0xd5,  0x85,  0xa6,  0x00,  0x00,  0x00,  0x31,  0x01,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x1d,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x15,  0x00,  0x00,  0x00,  0x52,  0x6f,  0x62,  0x6f, 
 0x74,  0x53,  0x74,  0x61,  0x74,  0x75,  0x73,  0x3a,  0x3a,  0x49,  0x6d,  0x75,  0x44,  0x61,  0x74,  0x61, 
 0x00,  0x00,  0x00,  0x00,  0x05,  0x01,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x1e,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x04,  0x0a,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x6f,  0x72,  0x69,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x09,  0x0a,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00,  0x6f,  0x72,  0x69,  0x5f, 
 0x63,  0x6f,  0x76,  0x00,  0x00,  0x00,  0x00,  0x00,  0x26,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x03,  0x0a,  0x00,  0x00, 
 0x0c,  0x00,  0x00,  0x00,  0x61,  0x6e,  0x67,  0x75,  0x6c,  0x61,  0x72,  0x5f,  0x76,  0x65,  0x6c,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x2a,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x09,  0x0a,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00, 
 0x61,  0x6e,  0x67,  0x75,  0x6c,  0x61,  0x72,  0x5f,  0x76,  0x65,  0x6c,  0x5f,  0x63,  0x6f,  0x76,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x25,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x03,  0x0a,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x6c,  0x69,  0x6e,  0x65,  0x61,  0x72,  0x5f,  0x61,  0x63,  0x63,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x29,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x09,  0x0a,  0x00,  0x00,  0x0f,  0x00,  0x00,  0x00,  0x6c,  0x69,  0x6e,  0x65, 
 0x61,  0x72,  0x5f,  0x61,  0x63,  0x63,  0x5f,  0x63,  0x6f,  0x76,  0x00,  0x00,  0x00,  0xf2,  0x96,  0xfa, 
 0xd0,  0xfa,  0x3e,  0x59,  0xa3,  0xc2,  0x0e,  0xc4,  0xad,  0xe1,  0x5e,  0xf0,  0x79,  0x00,  0x00,  0x00, 
 0xf2,  0x51,  0x01,  0x00,  0x1d,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x15,  0x00,  0x00,  0x00, 
 0x52,  0x6f,  0x62,  0x6f,  0x74,  0x53,  0x74,  0x61,  0x74,  0x75,  0x73,  0x3a,  0x3a,  0x4a,  0x6f,  0x79, 
 0x44,  0x61,  0x74,  0x61,  0x00,  0x00,  0x00,  0x00,  0x4d,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x1f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x02,  0x0a,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x61,  0x78,  0x65,  0x73, 
 0x00,  0x00,  0x00,  0x00,  0x21,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x0e,  0x04,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00, 
 0x62,  0x75,  0x74,  0x74,  0x6f,  0x6e,  0x00,  0x00,  0x00,  0xf2,  0x2a,  0x24,  0x55,  0xec,  0x93,  0x90, 
 0x38,  0xb6,  0xd8,  0x5c,  0xc2,  0x1c,  0x28,  0x48,  0x88,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x25,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1d,  0x00,  0x00,  0x00,  0x52,  0x6f,  0x62,  0x6f, 
 0x74,  0x53,  0x74,  0x61,  0x74,  0x75,  0x73,  0x3a,  0x3a,  0x4d,  0x6f,  0x74,  0x6f,  0x72,  0x53,  0x74, 
 0x61,  0x74,  0x65,  0x41,  0x72,  0x72,  0x61,  0x79,  0x00,  0x00,  0x00,  0x00,  0x54,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x2e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf2, 
 0x01,  0x00,  0x12,  0xf2,  0xde,  0x57,  0x7d,  0x0f,  0x4c,  0x6a,  0xb5,  0xf6,  0x6f,  0x8d,  0x1f,  0x4a, 
 0xd0,  0xf5,  0x00,  0x00,  0x0c,  0x00,  0x00,  0x00,  0x6d,  0x6f,  0x74,  0x6f,  0x72,  0x73,  0x74,  0x61, 
 0x74,  0x65,  0x73,  0x00,  0x00,  0x00,  0x00,  0x00,  0x18,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x05,  0x00,  0x0a,  0x00,  0x00,  0x00,  0x74,  0x69,  0x6d,  0x65,  0x73,  0x74,  0x61,  0x6d, 
 0x70,  0x00,  0x00,  0x00,  0xf2,  0xde,  0x57,  0x7d,  0x0f,  0x4c,  0x6a,  0xb5,  0xf6,  0x6f,  0x8d,  0x1f, 
 0x4a,  0xd0,  0xf5,  0x00,  0xca,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00,  0x20,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x18,  0x00,  0x00,  0x00,  0x52,  0x6f,  0x62,  0x6f,  0x74,  0x53,  0x74,  0x61, 
 0x74,  0x75,  0x73,  0x3a,  0x3a,  0x4d,  0x6f,  0x74,  0x6f,  0x72,  0x53,  0x74,  0x61,  0x74,  0x65,  0x00, 
 0x9e,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x0a,  0x00,  0x04,  0x00,  0x00,  0x00,  0x70,  0x6f,  0x73,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x12,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x76,  0x65,  0x6c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x0a,  0x00,  0x04,  0x00,  0x00,  0x00,  0x74,  0x61,  0x75,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x17,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x06,  0x00,  0x09,  0x00,  0x00,  0x00, 
 0x6d,  0x6f,  0x74,  0x6f,  0x72,  0x5f,  0x69,  0x64,  0x00,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x06,  0x00,  0x06,  0x00,  0x00,  0x00,  0x65,  0x72,  0x72,  0x6f, 
 0x72,  0x00,  0x00,  0x00,  0x1a,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x00, 
 0x0c,  0x00,  0x00,  0x00,  0x74,  0x65,  0x6d,  0x70,  0x65,  0x72,  0x61,  0x74,  0x75,  0x72,  0x65,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x9a,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0xf2,  0xe5,  0x42,  0x04, 
 0x3f,  0x0e,  0x3a,  0x58,  0x70,  0x43,  0xc8,  0x0c,  0x8a,  0xf6,  0x5f,  0xf1,  0x4d,  0x53,  0xc3,  0xf9, 
 0x93,  0xb4,  0x12,  0xcc,  0xd8,  0xb9,  0x9d,  0xcb,  0x98,  0xf2,  0xf2,  0x03,  0xd2,  0x66,  0xbf,  0xaf, 
 0x04,  0x70,  0x67,  0x57,  0x34,  0xc9,  0xd5,  0x85,  0xa6,  0xf1,  0x8d,  0x03,  0x78,  0xb7,  0xbd,  0x37, 
 0xbc,  0xca,  0x35,  0x03,  0x5a,  0x71,  0xf7,  0x11,  0xf2,  0x96,  0xfa,  0xd0,  0xfa,  0x3e,  0x59,  0xa3, 
 0xc2,  0x0e,  0xc4,  0xad,  0xe1,  0x5e,  0xf0,  0xf1,  0x94,  0x6f,  0x0c,  0x0e,  0x80,  0xac,  0xa0,  0xa8, 
 0xbb,  0xd8,  0x38,  0x87,  0x65,  0x29,  0xf2,  0x2a,  0x24,  0x55,  0xec,  0x93,  0x90,  0x38,  0xb6,  0xd8, 
 0x5c,  0xc2,  0x1c,  0x28,  0x48,  0xf1,  0xee,  0xf3,  0xd7,  0x1b,  0x32,  0xe7,  0xf9,  0x4e,  0x73,  0xd3, 
 0xc4,  0xfc,  0xd9,  0x31,  0xf2,  0xde,  0x57,  0x7d,  0x0f,  0x4c,  0x6a,  0xb5,  0xf6,  0x6f,  0x8d,  0x1f, 
 0x4a,  0xd0,  0xf5,  0xf1,  0xf7,  0xd0,  0x54,  0xd6,  0xe6,  0xce,  0x13,  0x7b,  0x25,  0x46,  0x7c,  0x54, 
 0x8d,  0xd6, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::RobotStatus::StatusData>::type_info_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x20,  0x01,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x88,  0x00,  0x00,  0x00,  0x84,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x4d,  0x53,  0xc3,  0xf9,  0x93,  0xb4,  0x12,  0xcc,  0xd8,  0xb9,  0x9d, 
 0xcb,  0x98,  0xf2,  0x00,  0x75,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x64,  0x00,  0x00,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0x8d,  0x03,  0x78,  0xb7,  0xbd,  0x37,  0xbc, 
 0xca,  0x35,  0x03,  0x5a,  0x71,  0xf7,  0x11,  0x00,  0xbe,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf1,  0x94,  0x6f,  0x0c,  0x0e,  0x80,  0xac,  0xa0,  0xa8,  0xbb,  0xd8,  0x38,  0x87,  0x65,  0x29,  0x00, 
 0x4e,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0xee,  0xf3,  0xd7,  0x1b,  0x32,  0xe7,  0xf9, 
 0x4e,  0x73,  0xd3,  0xc4,  0xfc,  0xd9,  0x31,  0x00,  0x4b,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf1,  0xf7,  0xd0,  0x54,  0xd6,  0xe6,  0xce,  0x13,  0x7b,  0x25,  0x46,  0x7c,  0x54,  0x8d,  0xd6,  0x00, 
 0x77,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x88,  0x00,  0x00,  0x00,  0x84,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0xe5,  0x42,  0x04,  0x3f,  0x0e,  0x3a,  0x58,  0x70,  0x43,  0xc8,  0x0c, 
 0x8a,  0xf6,  0x5f,  0x00,  0xbe,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x64,  0x00,  0x00,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0x03,  0xd2,  0x66,  0xbf,  0xaf,  0x04,  0x70, 
 0x67,  0x57,  0x34,  0xc9,  0xd5,  0x85,  0xa6,  0x00,  0x35,  0x01,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0x96,  0xfa,  0xd0,  0xfa,  0x3e,  0x59,  0xa3,  0xc2,  0x0e,  0xc4,  0xad,  0xe1,  0x5e,  0xf0,  0x00, 
 0x7d,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0x2a,  0x24,  0x55,  0xec,  0x93,  0x90,  0x38, 
 0xb6,  0xd8,  0x5c,  0xc2,  0x1c,  0x28,  0x48,  0x00,  0x8c,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0xde,  0x57,  0x7d,  0x0f,  0x4c,  0x6a,  0xb5,  0xf6,  0x6f,  0x8d,  0x1f,  0x4a,  0xd0,  0xf5,  0x00, 
 0xce,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPELIB

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::RobotStatus::ImuData>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::RobotStatus::ImuData>::getTypeName();
    }
};

template <>
struct topic_type_name<::RobotStatus::JoyData>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::RobotStatus::JoyData>::getTypeName();
    }
};

template <>
struct topic_type_name<::RobotStatus::MotorState>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::RobotStatus::MotorState>::getTypeName();
    }
};

template <>
struct topic_type_name<::RobotStatus::MotorStateArray>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::RobotStatus::MotorStateArray>::getTypeName();
    }
};

template <>
struct topic_type_name<::RobotStatus::StatusData>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::RobotStatus::StatusData>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::RobotStatus::ImuData)
REGISTER_TOPIC_TYPE(::RobotStatus::JoyData)
REGISTER_TOPIC_TYPE(::RobotStatus::MotorState)
REGISTER_TOPIC_TYPE(::RobotStatus::MotorStateArray)
REGISTER_TOPIC_TYPE(::RobotStatus::StatusData)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
const propvec &get_type_props<::RobotStatus::ImuData>();

namespace {
  static const volatile propvec &properties___RobotStatus__ImuData = get_type_props<::RobotStatus::ImuData>();
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::RobotStatus::ImuData& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!write(streamer, instance.ori()[0], instance.ori().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!write(streamer, instance.ori_cov()[0], instance.ori_cov().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!write(streamer, instance.angular_vel()[0], instance.angular_vel().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!write(streamer, instance.angular_vel_cov()[0], instance.angular_vel_cov().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!write(streamer, instance.linear_acc()[0], instance.linear_acc().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!write(streamer, instance.linear_acc_cov()[0], instance.linear_acc_cov().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::RobotStatus::ImuData& instance, key_mode key) {
  const auto &props = get_type_props<::RobotStatus::ImuData>();
  str.set_mode(cdr_stream::stream_mode::write, key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::RobotStatus::ImuData& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!read(streamer, instance.ori()[0], instance.ori().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!read(streamer, instance.ori_cov()[0], instance.ori_cov().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!read(streamer, instance.angular_vel()[0], instance.angular_vel().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!read(streamer, instance.angular_vel_cov()[0], instance.angular_vel_cov().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!read(streamer, instance.linear_acc()[0], instance.linear_acc().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!read(streamer, instance.linear_acc_cov()[0], instance.linear_acc_cov().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::RobotStatus::ImuData& instance, key_mode key) {
  const auto &props = get_type_props<::RobotStatus::ImuData>();
  str.set_mode(cdr_stream::stream_mode::read, key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::RobotStatus::ImuData& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!move(streamer, instance.ori()[0], instance.ori().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!move(streamer, instance.ori_cov()[0], instance.ori_cov().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!move(streamer, instance.angular_vel()[0], instance.angular_vel().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!move(streamer, instance.angular_vel_cov()[0], instance.angular_vel_cov().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!move(streamer, instance.linear_acc()[0], instance.linear_acc().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!move(streamer, instance.linear_acc_cov()[0], instance.linear_acc_cov().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::RobotStatus::ImuData& instance, key_mode key) {
  const auto &props = get_type_props<::RobotStatus::ImuData>();
  str.set_mode(cdr_stream::stream_mode::move, key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::RobotStatus::ImuData& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!max(streamer, instance.ori()[0], instance.ori().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!max(streamer, instance.ori_cov()[0], instance.ori_cov().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!max(streamer, instance.angular_vel()[0], instance.angular_vel().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!max(streamer, instance.angular_vel_cov()[0], instance.angular_vel_cov().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!max(streamer, instance.linear_acc()[0], instance.linear_acc().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!max(streamer, instance.linear_acc_cov()[0], instance.linear_acc_cov().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::RobotStatus::ImuData& instance, key_mode key) {
  const auto &props = get_type_props<::RobotStatus::ImuData>();
  str.set_mode(cdr_stream::stream_mode::max, key);
  return max(str, instance, props.data()); 
}

template<>
const propvec &get_type_props<::RobotStatus::JoyData>();

namespace {
  static const volatile propvec &properties___RobotStatus__JoyData = get_type_props<::RobotStatus::JoyData>();
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::RobotStatus::JoyData& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!write(streamer, instance.axes()[0], instance.axes().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!write(streamer, instance.button()[0], instance.button().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::RobotStatus::JoyData& instance, key_mode key) {
  const auto &props = get_type_props<::RobotStatus::JoyData>();
  str.set_mode(cdr_stream::stream_mode::write, key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::RobotStatus::JoyData& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!read(streamer, instance.axes()[0], instance.axes().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!read(streamer, instance.button()[0], instance.button().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::RobotStatus::JoyData& instance, key_mode key) {
  const auto &props = get_type_props<::RobotStatus::JoyData>();
  str.set_mode(cdr_stream::stream_mode::read, key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::RobotStatus::JoyData& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!move(streamer, instance.axes()[0], instance.axes().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!move(streamer, instance.button()[0], instance.button().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::RobotStatus::JoyData& instance, key_mode key) {
  const auto &props = get_type_props<::RobotStatus::JoyData>();
  str.set_mode(cdr_stream::stream_mode::move, key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::RobotStatus::JoyData& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!max(streamer, instance.axes()[0], instance.axes().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!max(streamer, instance.button()[0], instance.button().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::RobotStatus::JoyData& instance, key_mode key) {
  const auto &props = get_type_props<::RobotStatus::JoyData>();
  str.set_mode(cdr_stream::stream_mode::max, key);
  return max(str, instance, props.data()); 
}

template<>
const propvec &get_type_props<::RobotStatus::MotorState>();

namespace {
  static const volatile propvec &properties___RobotStatus__MotorState = get_type_props<::RobotStatus::MotorState>();
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::RobotStatus::MotorState& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.pos()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.vel()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.tau()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.motor_id()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.error()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.temperature()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::RobotStatus::MotorState& instance, key_mode key) {
  const auto &props = get_type_props<::RobotStatus::MotorState>();
  str.set_mode(cdr_stream::stream_mode::write, key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::RobotStatus::MotorState& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.pos()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.vel()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.tau()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.motor_id()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.error()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.temperature()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::RobotStatus::MotorState& instance, key_mode key) {
  const auto &props = get_type_props<::RobotStatus::MotorState>();
  str.set_mode(cdr_stream::stream_mode::read, key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::RobotStatus::MotorState& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.pos()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.vel()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.tau()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.motor_id()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.error()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.temperature()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::RobotStatus::MotorState& instance, key_mode key) {
  const auto &props = get_type_props<::RobotStatus::MotorState>();
  str.set_mode(cdr_stream::stream_mode::move, key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::RobotStatus::MotorState& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.pos()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.vel()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.tau()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.motor_id()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.error()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.temperature()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::RobotStatus::MotorState& instance, key_mode key) {
  const auto &props = get_type_props<::RobotStatus::MotorState>();
  str.set_mode(cdr_stream::stream_mode::max, key);
  return max(str, instance, props.data()); 
}

template<>
const propvec &get_type_props<::RobotStatus::MotorStateArray>();

namespace {
  static const volatile propvec &properties___RobotStatus__MotorStateArray = get_type_props<::RobotStatus::MotorStateArray>();
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::RobotStatus::MotorStateArray& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, false))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.motorstates().size());
      if (se_1 > 18 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      if (!write(streamer, instance.motorstates()[i_1], prop))
        return false;
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::RobotStatus::MotorStateArray& instance, key_mode key) {
  const auto &props = get_type_props<::RobotStatus::MotorStateArray>();
  str.set_mode(cdr_stream::stream_mode::write, key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::RobotStatus::MotorStateArray& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, false))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.motorstates().size());
      if (se_1 > 18 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.motorstates().resize(se_1);
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      if (!read(streamer, instance.motorstates()[i_1], prop))
        return false;
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::RobotStatus::MotorStateArray& instance, key_mode key) {
  const auto &props = get_type_props<::RobotStatus::MotorStateArray>();
  str.set_mode(cdr_stream::stream_mode::read, key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::RobotStatus::MotorStateArray& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, false))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.motorstates().size());
      if (se_1 > 18 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      if (!move(streamer, instance.motorstates()[i_1], prop))
        return false;
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::RobotStatus::MotorStateArray& instance, key_mode key) {
  const auto &props = get_type_props<::RobotStatus::MotorStateArray>();
  str.set_mode(cdr_stream::stream_mode::move, key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::RobotStatus::MotorStateArray& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, false))
        return false;
      {
      uint32_t se_1 = 18;
      if (!max(streamer, se_1))
        return false;
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      if (!max(streamer, instance.motorstates()[i_1], prop))
        return false;
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::RobotStatus::MotorStateArray& instance, key_mode key) {
  const auto &props = get_type_props<::RobotStatus::MotorStateArray>();
  str.set_mode(cdr_stream::stream_mode::max, key);
  return max(str, instance, props.data()); 
}

template<>
const propvec &get_type_props<::RobotStatus::StatusData>();

namespace {
  static const volatile propvec &properties___RobotStatus__StatusData = get_type_props<::RobotStatus::StatusData>();
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::RobotStatus::StatusData& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.imudata(), prop))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.joydata(), prop))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.motorstatearray(), prop))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::RobotStatus::StatusData& instance, key_mode key) {
  const auto &props = get_type_props<::RobotStatus::StatusData>();
  str.set_mode(cdr_stream::stream_mode::write, key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::RobotStatus::StatusData& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.imudata(), prop))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.joydata(), prop))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.motorstatearray(), prop))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::RobotStatus::StatusData& instance, key_mode key) {
  const auto &props = get_type_props<::RobotStatus::StatusData>();
  str.set_mode(cdr_stream::stream_mode::read, key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::RobotStatus::StatusData& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.imudata(), prop))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.joydata(), prop))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.motorstatearray(), prop))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::RobotStatus::StatusData& instance, key_mode key) {
  const auto &props = get_type_props<::RobotStatus::StatusData>();
  str.set_mode(cdr_stream::stream_mode::move, key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::RobotStatus::StatusData& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.imudata(), prop))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.joydata(), prop))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.motorstatearray(), prop))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::RobotStatus::StatusData& instance, key_mode key) {
  const auto &props = get_type_props<::RobotStatus::StatusData>();
  str.set_mode(cdr_stream::stream_mode::max, key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX__HOME_OEM_WORK_N2_DDS_DDS_TEST_DEMO_BUILD_ROBOT_STATUS_HPP_659649EB79AFE07BC409F78864E2F500
